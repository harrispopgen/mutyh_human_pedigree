#! /bin/bash

##### filter original VCF for umap100 mappable regions, AVERAGED accessible regions of genome (12 < average 10KB window depth generated by samtools depth > 120) #####
##### exclude: telomere regions, centromere regions, segmental duplication regions, 1000 Genomes common SNPs #####

module load modules modules-init modules-gs # initialize modules # initialize module environment
module load htslib/1.9-20 bcftools/1.12 bedtools/2.29.2 # load in htslib 1.9-20, bcftools 1.12, and bedtools 2.29.2

# Define directories and files for input and output
vcf_directory="/net/harris/vol1/home/clyoung1/myh_pedigree/230705_fullpipeline/PossibleDeNovo_files/unfiltered_vcfs/output/SNVs_only"
outdir="/net/harris/vol1/home/clyoung1/myh_pedigree/230705_fullpipeline/PossibleDeNovo_files/redo_filtered_vcfs/output"
accessible_regions="/net/harris/vol1/home/clyoung1/myh_pedigree/230705_fullpipeline/samtools_depth_files/averaged_depths_per_chr/output/averaged_accessible_bases_no_depths.bed"
mappable_regions="/net/harris/vol1/data/human_mutyh_pedigree/230710_genome_masks/umapS100_UCSC_tb.bed"
telomere_regions="/net/harris/vol1/data/hg38/ucsc_hg38_telomere_tracks.txt"
centromere_regions="/net/harris/vol1/data/hg38/ucsc_hg38_centromere_tracks.txt"
seg_dup_regions="/net/harris/vol1/data/hg38/ucsc_hg38_seg_dups_tracks.txt"
common_SNPs="/net/harris/vol1/data/human_mutyh_pedigree/230710_genome_masks/ucsc_hg38_common_dbSNP_153.bed"
output_counts_file="$outdir/sites_removed_counts.txt"

# Create a temporary directory for intermediate files
tmp_dir=$(mktemp -d)

# Function to get the count of sites in the BED files
get_site_count() {
    local bed_file="$1"

    # Use awk to calculate the total number of bases in the BED file
    awk '$1 ~ /^chr[0-9]{1,2}$/ {sum += $3 - $2} END {print sum}' "$bed_file"
}

### Function to count VCF variants removed by each mask
count_sites_removed() {
    local vcf_file="$1"
    local output_file="$2"

    # Prepare the VCF file for processing
    tabix -f -p vcf "$vcf_file"

    # Count initial variants
    initial_variants=$(bcftools view "$vcf_file" | grep -v '^#' | wc -l)

    echo "Original number of variants in $(basename "$vcf_file"): $initial_variants" >> "$output_counts_file"
    
    # Apply masks sequentially and count variants removed
    # Temporary VCF file for intermediate steps
    local tmp_vcf="$tmp_dir/temp.vcf.gz"

    cp "$vcf_file" "$tmp_vcf"

    local mask_list=("$centromere_regions" "$telomere_regions" "$seg_dup_regions" "$common_SNPs" "$accessible_regions" "$mappable_regions")
    local mask_names=("centromere" "telomere" "seg_dup" "common_SNPs" "accessible" "mappable")

    for idx in "${!mask_list[@]}"; do # Apply each mask and count variants
        mask="${mask_list[$idx]}"
        mask_name="${mask_names[$idx]}"

        # Count before applying mask
        before_count=$(zcat "$tmp_vcf" | grep -v '^#' | wc -l)

        # Apply mask and save to a new temporary file
        if [ "$mask_name" == "accessible" ] || [ "$mask_name" == "mappable" ]; then
            bcftools view -O z -T "$mask" "$tmp_vcf" > "$tmp_dir/after_$mask_name.vcf.gz"
        else
            bcftools view -O z -T ^"$mask" "$tmp_vcf" > "$tmp_dir/after_$mask_name.vcf.gz"
        fi

        # Count after applying mask
        after_count=$(zcat "$tmp_dir/after_$mask_name.vcf.gz" | grep -v '^#' | wc -l)

        # Calculate number of variants removed by this mask
        variants_removed_by_mask=$((before_count - after_count))

        echo "Number of variants removed by $mask_name from $(basename "$vcf_file"): $variants_removed_by_mask" >> "$output_counts_file"

        # Make the new file the temporary file for the next round
        mv "$tmp_dir/after_$mask_name.vcf.gz" "$tmp_vcf"

    done
    
    # Count and log the final number of variants in each VCF file
    # move the last temporary file to the output file
    mv "$tmp_vcf" "$output_file"

    # Count remaining variants after filtering the vcf
    remaining_variants=$(zcat "$output_file" | grep -v '^#' | wc -l)

    # Calculate the number of variants removed from the vcf
    variants_removed=$((initial_variants - remaining_variants))

    echo "Total number of variants removed from $(basename "$vcf_file"): $variants_removed" >> "$output_counts_file"    
    echo "Total number of variants in filtered $(basename "$vcf_file"): $remaining_variants" >> "$output_counts_file"    
}


### Process BED files with bedtools to apply various genomic masks 
# Initial count of sites in the original BED file
total_sites=$(get_site_count "$accessible_regions")

# Intersect existing BED file with telomere, centromere, seg dups, and mappable files

bedtools subtract -a "$accessible_regions" -b "$centromere_regions" > "$tmp_dir/intersect_tmp.bed"
centromere_removed=$(get_site_count "$tmp_dir/intersect_tmp.bed")

bedtools subtract -a "$tmp_dir/intersect_tmp.bed" -b "$telomere_regions" > "$tmp_dir/intersect_tmp2.bed"
telomere_removed=$(get_site_count "$tmp_dir/intersect_tmp2.bed")

bedtools subtract -a "$tmp_dir/intersect_tmp2.bed" -b "$seg_dup_regions" > "$tmp_dir/intersect_tmp3.bed"
seg_dups_removed=$(get_site_count "$tmp_dir/intersect_tmp3.bed")

bedtools subtract -a "$tmp_dir/intersect_tmp3.bed" -b "$common_SNPs" > "$tmp_dir/intersect_tmp4.bed"
common_snps_removed=$(get_site_count "$tmp_dir/intersect_tmp4.bed")

# sort mappability BED file before applying it as a positive mask (remove any overlapping regions extending the denominator)
bedtools sort -i "$mappable_regions" | bedtools merge -i stdin > "$tmp_dir/mappable_regions_merged.bed"

bedtools intersect -a "$tmp_dir/intersect_tmp4.bed" -b "$tmp_dir/mappable_regions_merged.bed" > "$outdir/averaged_accessible_bases_no_cent_no_telo_no_segdups_noSNPs_mappable.bed"
mappable_included=$(get_site_count "$outdir/averaged_accessible_bases_no_cent_no_telo_no_segdups_noSNPs_mappable.bed")

# Output the number of sites removed after applying each bedtools mask
echo "Number of sites after applying each mask to BED file"  >> "$output_counts_file"
echo "- Accessible regions (input): $total_sites" >> "$output_counts_file"
echo "- Centromere regions removed: $centromere_removed" >> "$output_counts_file"
echo "- Telomere regions removed: $telomere_removed" >> "$output_counts_file"
echo "- Segmental duplications removed: $seg_dups_removed" >> "$output_counts_file"
echo "- Common SNPs removed: $common_snps_removed" >> "$output_counts_file"
echo "- Mappable regions grabbed (final # of accessible bases): $mappable_included" >> "$output_counts_file"

# Make sure bedtools masking worked as expected
if [ ! -s "$outdir/averaged_accessible_bases_no_cent_no_telo_no_segdups_noSNPs_mappable.bed" ]; then
    echo "Failed to create intermediate BED file. Exiting."
    rm -rf "$tmp_dir"
    exit 1
fi

# Process VCF files and count sites removed

for vcf_file in "$vcf_directory"/*.vcf.gz; do
    filename=$(basename "$vcf_file" .vcf.gz)
    output_file="$outdir/$filename.accessible.vcf.gz"
    tmp_output_file="$tmp_dir/$filename.tmp.vcf.gz"

    count_sites_removed "$vcf_file" "$tmp_output_file"

    if [ -s "$tmp_output_file" ]; then
        mv "$tmp_output_file" "$output_file"
    fi
done

# Remove temporary directory
rm -rf "$tmp_dir"

